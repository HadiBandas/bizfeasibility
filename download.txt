Kamu adalah senior full-stack developer React/Next.js yang ahli dalam analisis keuangan bisnis.

**Task:** Extend aplikasi BizFeasibility Starter dengan fitur profesional berikut:

**Konteks Kode Existing:**

import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';

// --- ICONS (Inline SVG for portability) ---
const HelpCircleIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-500">
    <circle cx="12" cy="12" r="10"></circle>
    <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path>
    <line x1="12" y1="17" x2="12.01" y2="17"></line>
  </svg>
);
const ArrowRightIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <line x1="5" y1="12" x2="19" y2="12"></line>
    <polyline points="12 5 19 12 12 19"></polyline>
  </svg>
);
const TrashIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-red-500">
        <polyline points="3 6 5 6 21 6"></polyline>
        <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
    </svg>
);
const AlertTriangleIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-yellow-500">
        <path d="m21.73 18-8-14a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path>
        <line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12.01" y2="17"></line>
    </svg>
);
const SparklesIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
        <path d="m12 3-1.9 5.8-5.8 1.9 5.8 1.9L12 18l1.9-5.8 5.8-1.9-5.8-1.9L12 3zM22 12l-2.8 1-1 2.8 1 2.8 2.8 1 2.8-1 1-2.8-1-2.8-2.8-1zM3 12l-2.8 1-1 2.8 1 2.8 2.8 1 2.8-1 1-2.8-1-2.8-2.8-1z" />
    </svg>
);


// --- GEMINI API HELPER ---
const callGeminiAPI = async (prompt, isJson = false) => {
    // IMPORTANT: Leave apiKey empty. Canvas will handle authentication.
    const apiKey = ""; 
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
    
    let payload = {
        contents: [{ role: "user", parts: [{ text: prompt }] }],
    };

    if (isJson) {
        payload.generationConfig = {
            responseMimeType: "application/json",
            responseSchema: {
                type: "OBJECT",
                properties: {
                    nama: { type: "STRING" },
                    deskripsi: { type: "STRING" }
                }
            }
        };
    }
    
    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
        
        if (!response.ok) {
            const errorBody = await response.text();
            console.error("Gemini API Error Response:", errorBody);
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();

        if (result.candidates && result.candidates.length > 0) {
            const content = result.candidates[0].content.parts[0].text;
            return content;
        } else {
            console.error("No candidates returned from Gemini API", result);
            throw new Error("Invalid response structure from Gemini API.");
        }
    } catch (error) {
        console.error('Error calling Gemini API:', error);
        return null;
    }
};


// --- MOCK FIREBASE UTILS (/utils/firebase.js) ---
const mockFirebase = {
  saveProjectData: async (userId, projectId, data) => {
    console.log('Firebase: Saving data...', { userId, projectId, data });
    await new Promise(res => setTimeout(res, 500));
    if (Math.random() < 0.1) {
        console.error('Firebase: Gagal menyimpan data proyek.');
        return { success: false, error: 'Gagal menyimpan data proyek.' };
    }
    const newProjectId = projectId || `proj_${Date.now()}`;
    console.log(`Firebase: Data disimpan dengan ID proyek: ${newProjectId}`);
    return { success: true, projectId: newProjectId };
  },
  generatePdf: async (projectData) => {
    console.log('Firebase: Generating PDF...', { projectData });
    await new Promise(res => setTimeout(res, 1500));
    console.log('Firebase: PDF generated.');
    return { success: true, url: `https://mockstorage.com/pdfs/laporan_${projectData.ideBisnis.nama.replace(/\s/g, '_')}.pdf` };
  }
};


// --- ZUSTAND STORE (/context/useWizardStore.js) ---
const useWizardStore = create(
  persist(
    (set, get) => ({
      // STATE
      currentStep: 1,
      projectId: null,
      userId: 'user_123',
      lastInteraction: Date.now(),
      ideBisnis: { nama: '', deskripsi: '', kategori: '' },
      risetPasar: { target: '', kompetitor: [], keyword: '', aiAnalysis: '' },
      keuangan: { modal: '', hargaJual: '', volume: '' },
      laporan: { pdfUrl: null, isGenerating: false },
      uiState: { isGeneratingIdea: false, isAnalyzingCompetitors: false },
      
      // ACTIONS
      actions: {
        // --- Navigation ---
        nextStep: () => set(state => ({ currentStep: Math.min(state.currentStep + 1, 4) })),
        prevStep: () => set(state => ({ currentStep: Math.max(state.currentStep - 1, 1) })),
        goToStep: (step) => set({ currentStep: step }),

        // --- Data Updates ---
        updateData: (stepKey, data) => set(state => ({
            [stepKey]: { ...state[stepKey], ...data },
            lastInteraction: Date.now()
        })),
        addKompetitor: () => set(state => ({ risetPasar: { ...state.risetPasar, kompetitor: [...state.risetPasar.kompetitor, { id: Date.now(), nama: '', keunggulan: '', harga: '' }] }})),
        updateKompetitor: (index, field, value) => set(state => ({ risetPasar: { ...state.risetPasar, kompetitor: state.risetPasar.kompetitor.map((k, i) => i === index ? { ...k, [field]: value } : k) }})),
        removeKompetitor: (index) => set(state => ({ risetPasar: { ...state.risetPasar, kompetitor: state.risetPasar.kompetitor.filter((_, i) => i !== index) }})),
        setUiState: (key, value) => set(state => ({ uiState: { ...state.uiState, [key]: value }})),

        // --- Gemini-Powered Actions ---
        generateBusinessIdea: async () => {
            const { ideBisnis } = get();
            if (!ideBisnis.kategori) return;

            get().actions.setUiState('isGeneratingIdea', true);
            const prompt = `Anda adalah seorang konsultan bisnis yang kreatif. Berikan satu ide nama bisnis dan deskripsi singkat (maksimal 40 kata) untuk kategori bisnis: "${ideBisnis.kategori}". Nama harus unik dan mudah diingat. Deskripsi harus menarik. Jawab dalam format JSON.`;
            
            const result = await callGeminiAPI(prompt, true);
            
            if (result) {
                try {
                    const parsedResult = JSON.parse(result);
                    get().actions.updateData('ideBisnis', { nama: parsedResult.nama, deskripsi: parsedResult.deskripsi });
                } catch (e) {
                    console.error("Failed to parse Gemini JSON response", e);
                }
            }
            get().actions.setUiState('isGeneratingIdea', false);
        },

        analyzeCompetitors: async () => {
            const { ideBisnis, risetPasar } = get();
            if (risetPasar.kompetitor.length === 0) return;

            get().actions.setUiState('isAnalyzingCompetitors', true);
            get().actions.updateData('risetPasar', { aiAnalysis: '' });

            const competitorInfo = risetPasar.kompetitor.map(c => `- ${c.nama} (Keunggulan: ${c.keunggulan})`).join('\n');
            const prompt = `Anda adalah seorang analis bisnis strategis. Bisnis saya adalah "${ideBisnis.nama}". Kompetitor saya adalah:\n${competitorInfo}\n\n Berikan analisis singkat (maksimal 100 kata) tentang potensi celah pasar atau keunggulan unik yang bisa saya ambil. Berikan dalam format poin-poin singkat.`;
            
            const analysis = await callGeminiAPI(prompt);
            
            if (analysis) {
                get().actions.updateData('risetPasar', { aiAnalysis: analysis });
            }
            get().actions.setUiState('isAnalyzingCompetitors', false);
        },
        
        // --- Validation ---
        validateStep: (step) => {
          const state = get();
          switch (step) {
            case 1:
              return !!(state.ideBisnis.nama.trim() && state.ideBisnis.kategori && state.ideBisnis.deskripsi.trim().length > 10);
            case 2:
              return !!(state.risetPasar.target.trim() && state.risetPasar.kompetitor.length > 0 && state.risetPasar.kompetitor.every(k => k.nama && k.keunggulan));
            case 3:
              const { modal, hargaJual, volume } = state.keuangan;
              return !!(Number(modal) > 0 && Number(hargaJual) > 0 && Number(volume) > 0);
            case 4:
                return get().actions.validateStep(1) && get().actions.validateStep(2) && get().actions.validateStep(3);
            default:
              return false;
          }
        },

        // --- Business Logic & API Calls ---
        autoSave: async () => {
            const { userId, projectId, ideBisnis, risetPasar, keuangan } = get();
            const dataToSave = { ideBisnis, risetPasar, keuangan };
            const result = await mockFirebase.saveProjectData(userId, projectId, dataToSave);
            if(result.success && !projectId){
                set({ projectId: result.projectId });
            }
        },
        generateAndUploadPdf: async () => {
            set({ laporan: { ...get().laporan, isGenerating: true } });
            const { ideBisnis, risetPasar, keuangan } = get();
            const result = await mockFirebase.generatePdf({ ideBisnis, risetPasar, keuangan });
            if (result.success) {
                set({ laporan: { pdfUrl: result.url, isGenerating: false } });
            } else {
                set({ laporan: { ...get().laporan, isGenerating: false } });
            }
        },

        // --- Utility ---
        resetWizard: () => set({
            currentStep: 1,
            projectId: null,
            lastInteraction: Date.now(),
            ideBisnis: { nama: '', deskripsi: '', kategori: '' },
            risetPasar: { target: '', kompetitor: [], keyword: '', aiAnalysis: '' },
            keuangan: { modal: '', hargaJual: '', volume: '' },
            laporan: { pdfUrl: null, isGenerating: false },
        }),
        checkInactivity: () => (Date.now() - get().lastInteraction > 120000), // 2 minutes
        loadContoh: () => set({
            ideBisnis: {
                nama: 'Warung Kopi Sederhana',
                deskripsi: 'Warung kopi dengan konsep cozy dan menu unik seperti kopi durian, pisang bakar spesial, dan snack lokal. Target mahasiswa dan pekerja kantoran di sekitar kampus.',
                kategori: 'food'
            },
            lastInteraction: Date.now(),
        }),
      }
    }),
    {
      name: 'bizfeasibility-wizard-storage',
      storage: createJSONStorage(() => sessionStorage), 
      partialize: (state) => ({
        ...Object.fromEntries(Object.entries(state).filter(([key]) => !['actions', 'uiState'].includes(key))),
        laporan: { pdfUrl: null, isGenerating: false },
      }),
    }
  )
);


// --- UI COMPONENTS (/components) ---

const Tooltip = ({ text, children }) => (
    <div className="relative group flex items-center">
        {children}
        <div className="absolute left-1/2 -translate-x-1/2 bottom-full mb-2 w-max max-w-xs bg-gray-800 text-white text-xs rounded py-1 px-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none z-10">
            {text}
        </div>
    </div>
);

const Input = ({ label, tooltip, value, onChange, placeholder, type = 'text', maxLength, ...props }) => (
    <div>
        <div className="flex items-center mb-2">
            <label className="text-base font-medium text-gray-700">{label}</label>
            {tooltip && (
                <Tooltip text={tooltip}>
                    <span className="ml-2"><HelpCircleIcon /></span>
                </Tooltip>
            )}
        </div>
        <input
            type={type}
            value={value}
            onChange={onChange}
            placeholder={placeholder}
            maxLength={maxLength}
            className="w-full border border-gray-300 rounded-lg px-4 py-3 text-base focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition"
            {...props}
        />
        {maxLength && <p className="text-xs text-right text-gray-500 mt-1">{String(value || '').length}/{maxLength}</p>}
    </div>
);

const Textarea = ({ label, tooltip, value, onChange, placeholder, maxLength, rows=4 }) => (
    <div>
        <div className="flex items-center mb-2">
            <label className="text-base font-medium text-gray-700">{label}</label>
            {tooltip && (
                <Tooltip text={tooltip}>
                     <span className="ml-2"><HelpCircleIcon /></span>
                </Tooltip>
            )}
        </div>
        <textarea
            value={value}
            onChange={onChange}
            placeholder={placeholder}
            maxLength={maxLength}
            rows={rows}
            className="w-full border border-gray-300 rounded-lg px-4 py-3 text-base resize-none focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition"
        />
        {maxLength && <p className="text-xs text-right text-gray-500 mt-1">{String(value || '').length}/{maxLength}</p>}
    </div>
);

const Select = ({ label, tooltip, value, onChange, children }) => (
     <div>
        <div className="flex items-center mb-2">
            <label className="text-base font-medium text-gray-700">{label}</label>
            {tooltip && (
                <Tooltip text={tooltip}>
                    <span className="ml-2"><HelpCircleIcon /></span>
                </Tooltip>
            )}
        </div>
        <div className="relative">
             <select
                value={value}
                onChange={onChange}
                className="w-full appearance-none border border-gray-300 rounded-lg px-4 py-3 text-base bg-white focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition"
            >
                {children}
            </select>
            <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/></svg>
            </div>
        </div>
    </div>
);

const Button = ({ children, onClick, disabled, variant = 'primary', className = '', icon }) => {
    const baseClasses = 'w-full py-3 px-6 rounded-lg text-center font-semibold transition duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 flex items-center justify-center gap-2';
    const variantClasses = {
        primary: `bg-green-500 text-white hover:bg-green-600 focus:ring-green-500 ${disabled ? 'bg-gray-300 hover:bg-gray-300 text-gray-500 cursor-not-allowed' : ''}`,
        secondary: `bg-transparent border border-gray-300 text-gray-700 hover:bg-gray-100 focus:ring-gray-400 ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`,
        gemini: `bg-gradient-to-r from-purple-500 to-indigo-600 text-white hover:from-purple-600 hover:to-indigo-700 focus:ring-indigo-500 ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`
    };
    return (
        <button onClick={onClick} disabled={disabled} className={`${baseClasses} ${variantClasses[variant]} ${className}`}>
            {icon && <span>{icon}</span>}
            {children}
        </button>
    );
};

const ProgressBar = () => {
    const currentStep = useWizardStore(state => state.currentStep);
    const progress = (currentStep - 1) / 3 * 100;

    const steps = [
        { num: 1, label: 'Ide' }, { num: 2, label: 'Riset' }, { num: 3, label: 'Keuangan' }, { num: 4, label: 'Laporan' }
    ];

    return (
        <div className="mb-8">
            <div className="relative h-2 bg-gray-200 rounded-full">
                <div className="absolute top-0 left-0 h-full bg-green-500 rounded-full transition-all duration-500 ease-out" style={{ width: `${progress}%` }}></div>
            </div>
            <div className="flex justify-between mt-2">
                {steps.map(({ num, label }) => (
                    <div key={num} className="flex-1 text-center">
                        <div className={`text-xs font-semibold ${currentStep >= num ? 'text-green-600' : 'text-gray-500'}`}>{label}</div>
                    </div>
                ))}
            </div>
        </div>
    );
};

const KeuanganCalculator = () => {
    const keuangan = useWizardStore(state => state.keuangan);
    const { modal, hargaJual, volume } = keuangan;

    const { totalPenjualan, bepBulan, isValid } = useMemo(() => {
        const numModal = Number(modal) || 0;
        const numHargaJual = Number(hargaJual) || 0;
        const numVolume = Number(volume) || 0;
        const isValid = numModal > 0 && numHargaJual > 0 && numVolume > 0;
        if (!isValid) return { totalPenjualan: 0, bepBulan: 0, isValid: false };
        const totalPenjualan = numHargaJual * numVolume;
        const bepBulan = Math.ceil(numModal / totalPenjualan);
        return { totalPenjualan, bepBulan, isValid };
    }, [modal, hargaJual, volume]);

    const modalBarHeight = 100;
    const penjualanBarHeight = isValid ? Math.min((totalPenjualan / Number(modal)) * 100, 200) : 0;

    return (
        <div className="bg-gray-50 border border-gray-200 rounded-lg p-6 space-y-6">
            <h3 className="text-xl font-bold text-gray-800">Kalkulator Keuangan Otomatis</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 items-end">
                <div className="space-y-4">
                    <div className="bg-white p-4 rounded-lg shadow-sm"><p className="text-sm text-gray-500">Potensi Penjualan / Bulan</p><p className="text-2xl font-bold text-green-600">Rp {totalPenjualan.toLocaleString('id-ID')}</p></div>
                    <div className="bg-white p-4 rounded-lg shadow-sm"><p className="text-sm text-gray-500">Estimasi BEP (Bulan)</p><p className="text-2xl font-bold text-blue-600">{isValid && isFinite(bepBulan) ? `${bepBulan} bulan` : '-'}</p></div>
                </div>
                <div className="h-48 flex items-end justify-around gap-4 p-4 bg-white rounded-lg shadow-sm">
                    <div className="flex flex-col items-center w-1/3"><div className="w-full bg-blue-200 rounded-t-md" style={{ height: `${modalBarHeight}px` }}></div><p className="text-xs text-center mt-2">Modal Awal</p></div>
                    <div className="flex flex-col items-center w-1/3"><div className="w-full bg-green-200 rounded-t-md transition-all" style={{ height: `${penjualanBarHeight}px` }}></div><p className="text-xs text-center mt-2">Penjualan/Bulan</p></div>
                </div>
            </div>
             {!isValid && Number(modal) > 0 && (<p className="text-sm text-center text-gray-500">Masukkan harga jual dan volume penjualan untuk melihat perhitungan.</p>)}
        </div>
    )
};

const JanganPusingModal = ({ isOpen, onClose, onConfirm }) => {
    if (!isOpen) return null;
    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl p-6 m-4 max-w-sm w-full animate-fade-in-up">
                <div className="flex items-center mb-4"><AlertTriangleIcon /><h2 className="text-xl font-bold ml-2">Butuh Bantuan?</h2></div>
                <p className="text-gray-600 mb-6">Sepertinya Anda sedikit bingung. Apakah Anda ingin melihat contoh studi kasus "Warung Kopi Sederhana" untuk mendapatkan inspirasi?</p>
                <div className="flex justify-end space-x-3">
                    <Button onClick={onClose} variant="secondary">Nanti Saja</Button>
                    <Button onClick={onConfirm}>Ya, Tampilkan</Button>
                </div>
            </div>
        </div>
    );
};


// --- WIZARD SCREENS (/screens/wizard) ---

const IdeBisnisScreen = () => {
    const { ideBisnis, uiState, actions } = useWizardStore();
    const { updateData, validateStep, loadContoh, nextStep, autoSave, checkInactivity, generateBusinessIdea } = actions;
    
    const [showModal, setShowModal] = useState(false);
    
    useEffect(() => {
        const timer = setTimeout(() => {
            if (checkInactivity() && !ideBisnis.nama) { setShowModal(true); }
        }, 120000);
        return () => clearTimeout(timer);
    }, [ideBisnis.nama, checkInactivity]);

    const handleNext = () => { if (validateStep(1)) { autoSave(); nextStep(); } };
    
    const KATEGORI_BISNIS = [
        { label: 'Pilih Kategori', value: '' }, { label: 'Makanan & Minuman', value: 'food' }, { label: 'Fashion & Aksesoris', value: 'fashion' }, { label: 'Teknologi & Digital', value: 'tech' }, { label: 'Kesehatan & Kecantikan', value: 'health' }, { label: 'Pendidikan & Kursus', value: 'education' }, { label: 'Jasa & Layanan', value: 'service' }, { label: 'Retail & E-commerce', value: 'retail' }, { label: 'Lainnya', value: 'other' }
    ];

    return (
        <div className="space-y-6 animate-fade-in">
             <JanganPusingModal isOpen={showModal} onClose={() => setShowModal(false)} onConfirm={() => { loadContoh(); setShowModal(false); }}/>
            <div className="text-center">
                <h2 className="text-3xl font-bold text-gray-800">Ceritakan Ide Bisnis Anda</h2>
                <p className="text-gray-500 mt-1">Langkah 1 dari 4 • Jangan overthinking, cukup tulis yang terlintas.</p>
            </div>
            <div className="space-y-4">
                 <Select label="Kategori Bisnis" value={ideBisnis.kategori} onChange={(e) => updateData('ideBisnis', { kategori: e.target.value })}>
                    {KATEGORI_BISNIS.map(k => <option key={k.value} value={k.value}>{k.label}</option>)}
                </Select>
                 <Button onClick={generateBusinessIdea} disabled={!ideBisnis.kategori || uiState.isGeneratingIdea} variant="gemini" icon={<SparklesIcon/>}>
                    {uiState.isGeneratingIdea ? 'Mencari ide...' : '✨ Beri Saya Ide Nama & Deskripsi'}
                 </Button>
                <Input label="Nama Bisnis" tooltip="Nama yang mudah diingat dan menggambarkan bisnis Anda." placeholder="Contoh: Roti Unik Durian" value={ideBisnis.nama} onChange={(e) => updateData('ideBisnis', { nama: e.target.value })} maxLength={50}/>
                <Textarea label="Deskripsi Singkat" tooltip="Jelaskan produk/jasa, target customer, dan keunikan bisnis Anda dalam 1-2 kalimat." placeholder="Contoh: Kami menjual roti dengan rasa durian asli Medan, menargetkan ibu-ibu dan anak muda." value={ideBisnis.deskripsi} onChange={(e) => updateData('ideBisnis', { deskripsi: e.target.value })} maxLength={250} rows={5}/>
            </div>
            <div className="flex flex-col sm:flex-row gap-3 pt-4">
                <Button onClick={loadContoh} variant="secondary">Lihat Contoh</Button>
                <Button onClick={handleNext} disabled={!validateStep(1)} icon={<ArrowRightIcon/>}>Lanjut ke Riset Pasar</Button>
            </div>
        </div>
    );
};

const RisetPasarScreen = () => {
    const { risetPasar, uiState, actions } = useWizardStore();
    const { updateData, addKompetitor, updateKompetitor, removeKompetitor, validateStep, nextStep, prevStep, autoSave, analyzeCompetitors } = actions;
    
    const handleNext = () => { if (validateStep(2)) { autoSave(); nextStep(); } };
    
    return (
        <div className="space-y-6 animate-fade-in">
            <div className="text-center">
                <h2 className="text-3xl font-bold text-gray-800">Analisis Pasar & Kompetitor</h2>
                <p className="text-gray-500 mt-1">Langkah 2 dari 4 • Siapa target Anda dan siapa pesaing Anda?</p>
            </div>
            <div className="space-y-6">
                <Textarea label="Target Pasar" tooltip="Jelaskan siapa calon pelanggan utama Anda. (Contoh: Mahasiswa, pekerja kantoran, ibu rumah tangga)" placeholder="Contoh: Mahasiswa di sekitar kampus Telkom University dan pekerja kantoran di area perkantoran Sudirman." value={risetPasar.target} onChange={(e) => updateData('risetPasar', { target: e.target.value })} maxLength={200}/>
                <div>
                    <div className="flex items-center justify-between mb-2"><h3 className="text-base font-medium text-gray-700">Analisis Kompetitor</h3><Tooltip text="Sebutkan minimal 1 pesaing utama Anda."><span><HelpCircleIcon/></span></Tooltip></div>
                    <div className="space-y-4">
                       {risetPasar.kompetitor.map((k, index) => (
                           <div key={k.id} className="bg-white p-4 border rounded-lg space-y-3 relative">
                               <button onClick={() => removeKompetitor(index)} className="absolute top-2 right-2 p-1 hover:bg-red-100 rounded-full"><TrashIcon/></button>
                               <Input label={`Nama Kompetitor ${index+1}`} value={k.nama} onChange={e => updateKompetitor(index, 'nama', e.target.value)} placeholder="Contoh: Kopi Kenangan"/>
                               <Input label="Keunggulan Mereka" value={k.keunggulan} onChange={e => updateKompetitor(index, 'keunggulan', e.target.value)} placeholder="Contoh: Banyak cabang, harga murah"/>
                               <Input label="Estimasi Harga Jual Mereka" type="number" value={k.harga} onChange={e => updateKompetitor(index, 'harga', e.target.value)} placeholder="Contoh: 20000"/>
                           </div>
                       ))}
                       <Button onClick={addKompetitor} variant="secondary">+ Tambah Kompetitor</Button>
                    </div>
                </div>
                 <Button onClick={analyzeCompetitors} disabled={risetPasar.kompetitor.length === 0 || uiState.isAnalyzingCompetitors} variant="gemini" icon={<SparklesIcon/>}>
                    {uiState.isAnalyzingCompetitors ? 'Menganalisis...' : '✨ Analisis Kompetitor Saya'}
                 </Button>

                {uiState.isAnalyzingCompetitors && <div className="text-center text-gray-500">Menganalisis...</div>}
                
                {risetPasar.aiAnalysis && (
                    <div className="bg-purple-50 border-l-4 border-purple-500 p-4 rounded-r-lg">
                        <h4 className="font-bold text-purple-800">Analisis dari AI ✨</h4>
                        <p className="text-purple-700 whitespace-pre-wrap mt-2">{risetPasar.aiAnalysis}</p>
                    </div>
                )}

            </div>
             <div className="flex flex-col sm:flex-row gap-3 pt-4">
                <Button onClick={prevStep} variant="secondary">Kembali</Button>
                <Button onClick={handleNext} disabled={!validateStep(2)} icon={<ArrowRightIcon/>}>Lanjut ke Keuangan</Button>
            </div>
        </div>
    );
};

const KeuanganScreen = () => {
    const { keuangan, actions } = useWizardStore();
    const { updateData, validateStep, nextStep, prevStep, autoSave } = actions;
    
    const handleNext = () => { if (validateStep(3)) { autoSave(); nextStep(); } };
    const handleNumericInput = (field, value) => { const numericValue = value.replace(/[^0-9]/g, ''); updateData('keuangan', { [field]: numericValue }); };

    return (
         <div className="space-y-6 animate-fade-in">
            <div className="text-center"><h2 className="text-3xl font-bold text-gray-800">Proyeksi Keuangan</h2><p className="text-gray-500 mt-1">Langkah 3 dari 4 • Mari kita hitung potensi keuntungan Anda.</p></div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                 <Input label="Modal Awal (Rp)" tooltip="Total biaya yang Anda butuhkan untuk memulai bisnis." placeholder="Contoh: 5000000" value={Number(keuangan.modal).toLocaleString('id-ID')} onChange={(e) => handleNumericInput('modal', e.target.value)}/>
                <Input label="Harga Jual per Unit (Rp)" tooltip="Harga jual rata-rata satu produk/jasa Anda." placeholder="Contoh: 20000" value={Number(keuangan.hargaJual).toLocaleString('id-ID')} onChange={(e) => handleNumericInput('hargaJual', e.target.value)}/>
                <Input label="Target Volume Penjualan / Bulan" tooltip="Berapa banyak produk/jasa yang Anda targetkan terjual dalam sebulan?" placeholder="Contoh: 250" value={Number(keuangan.volume).toLocaleString('id-ID')} onChange={(e) => handleNumericInput('volume', e.target.value)}/>
            </div>
            <KeuanganCalculator />
            <div className="flex flex-col sm:flex-row gap-3 pt-4">
                <Button onClick={prevStep} variant="secondary">Kembali</Button>
                <Button onClick={handleNext} disabled={!validateStep(3)} icon={<ArrowRightIcon/>}>Lanjut ke Laporan</Button>
            </div>
        </div>
    );
};

const LaporanScreen = () => {
    const { ideBisnis, risetPasar, keuangan, laporan, actions } = useWizardStore();
    const { generateAndUploadPdf, prevStep, resetWizard } = actions;
    
    const DataPill = ({label, value}) => (
        <div className="bg-gray-100 p-3 rounded-lg"><p className="text-xs text-gray-500">{label}</p><p className="font-semibold text-gray-800">{value}</p></div>
    );

    return (
        <div className="space-y-6 animate-fade-in">
             <div className="text-center"><h2 className="text-3xl font-bold text-gray-800">Ringkasan Laporan Kelayakan</h2><p className="text-gray-500 mt-1">Langkah 4 dari 4 • Semua data Anda dalam satu tampilan.</p></div>
            <div className="space-y-6 bg-white p-6 border rounded-lg">
                <div>
                    <h3 className="text-xl font-bold mb-3">1. Ide Bisnis</h3>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4"><DataPill label="Nama Bisnis" value={ideBisnis.nama} /><DataPill label="Kategori" value={ideBisnis.kategori} /><div className="sm:col-span-2"><DataPill label="Deskripsi" value={ideBisnis.deskripsi} /></div></div>
                </div>
                <div>
                    <h3 className="text-xl font-bold mb-3">2. Riset Pasar</h3>
                     <DataPill label="Target Pasar" value={risetPasar.target} />
                     <div className="mt-4"><h4 className="font-semibold mb-2">Kompetitor:</h4><ul className="list-disc list-inside space-y-2">{risetPasar.kompetitor.map(k => <li key={k.id}>{k.nama} (Keunggulan: {k.keunggulan})</li>)}</ul></div>
                     {risetPasar.aiAnalysis && <div className="mt-4 bg-purple-50 border-l-4 border-purple-500 p-4 rounded-r-lg"><h4 className="font-bold text-purple-800">Analisis dari AI ✨</h4><p className="text-purple-700 whitespace-pre-wrap mt-2">{risetPasar.aiAnalysis}</p></div>}
                </div>
                 <div>
                    <h3 className="text-xl font-bold mb-3">3. Proyeksi Keuangan</h3>
                     <div className="grid grid-cols-2 sm:grid-cols-3 gap-4"><DataPill label="Modal Awal" value={`Rp ${Number(keuangan.modal).toLocaleString('id-ID')}`} /><DataPill label="Harga Jual" value={`Rp ${Number(keuangan.hargaJual).toLocaleString('id-ID')}`} /><DataPill label="Volume/Bulan" value={keuangan.volume} /></div>
                </div>
            </div>
            {laporan.pdfUrl ? (<div className="text-center p-4 bg-green-100 rounded-lg"><p className="text-green-800 font-semibold">Laporan PDF berhasil dibuat!</p><a href={laporan.pdfUrl} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline mt-2 inline-block">Download Laporan Anda</a></div>) : (<Button onClick={generateAndUploadPdf} disabled={laporan.isGenerating}>{laporan.isGenerating ? 'Membuat PDF...' : 'Buat & Simpan Laporan PDF'}</Button>)}
            <div className="flex flex-col sm:flex-row gap-3 pt-4">
                <Button onClick={prevStep} variant="secondary">Kembali</Button>
                <Button onClick={resetWizard} variant="secondary">Mulai Proyek Baru</Button>
            </div>
        </div>
    );
};


// --- MAIN APP COMPONENT ---
export default function App() {
  const currentStep = useWizardStore((state) => state.currentStep);

  const renderStep = () => {
    switch (currentStep) {
      case 1: return <IdeBisnisScreen />;
      case 2: return <RisetPasarScreen />;
      case 3: return <KeuanganScreen />;
      case 4: return <LaporanScreen />;
      default: return <IdeBisnisScreen />;
    }
  };

  return (
    <div className="bg-gray-50 min-h-screen font-sans text-gray-900 flex items-center justify-center p-4">
        <main className="w-full max-w-4xl mx-auto">
            <div className="bg-white rounded-xl shadow-2xl p-6 sm:p-10">
                <header className="text-center mb-6 border-b pb-4">
                    <h1 className="text-xl font-bold text-green-600">BizFeasibility Starter</h1>
                    <p className="text-sm text-gray-500">Analisis Kelayakan Bisnis dalam Genggaman</p>
                </header>
                <ProgressBar />
                {renderStep()}
            </div>
            <footer className="text-center mt-6 text-xs text-gray-400">
                <p>Prinsip Inti: "No Overwhelming UX" - Maksimal 3 Elemen Interaktif per Layar.</p>
                <p>&copy; 2025 BizFeasibility App. Dibuat dengan React, Zustand, dan ✨ Gemini.</p>
            </footer>
        </main>
    </div>
  );
}


---

**Fitur 1: Template Kelayakan Industri (Prioritas Tinggi)**
```javascript
// File: src/constants/industryTemplates.js
export default {
  food: {
    nama: "Makanan & Minuman",
    parameter: {
      minROI: 15,
      minIRR: 18,
      maxPayback: 2.5,
      minMargin: 30,
      fixedCosts: ["Sewa tempat", "Peralatan", "Lisensi"],
      variableCosts: ["Bahan baku", "Kemasan", "Delivery"]
    },
    benchmark: {
      payrollPct: [15, 20],
      marketingPct: [10, 15]
    }
  },
  // Buat 7 template lain: fashion, tech, health, education, service, retail, other
}
```

**Implementasi:**
1. Integrasi dengan Zustand store (simpan template terpilih di state `ideBisnis`)
2. Di step 1, tambah dropdown "Pilih Industri" yang load dari template
3. Gunakan parameter template untuk validasi kelayakan otomatis

---

**Fitur 2: Modul Biaya Operasional (Prioritas Tinggi)**
```jsx
// File: src/components/OperationalCosts.jsx
const OperationalCosts = () => {
  // State management untuk biaya tetap & variabel
  // Tabel dinamis dengan CRUD operations
  // Summary card dengan total biaya dan BEP
}
```

**Persyaratan:**
- Input biaya tetap (per bulan): Sewa, gaji, utilities, dll
- Input biaya variabel (per unit): Bahan baku, kemasan, komisi
- Auto-calculate: Total biaya tetap, Biaya variabel per unit
- Tampilkan peringatan jika biaya > benchmark industri

---

**Fitur 3: Kalkulator Keuangan Pro (Prioritas Tinggi)**
```javascript
// File: src/utils/financeCalculations.js
export const calculateIRR = (cashFlows) => {
  // Implementasi akurat dengan Newton-Raphson method
};

export const calculatePaybackPeriod = (investment, annualCashFlow) => {
  // Support fractional years (ex: 2.3 tahun)
};
```

**Metrik Wajib:**
- [x] IRR (Internal Rate of Return)
- [x] Payback Period 
- [x] ROI (Return on Investment)
- [x] BEP (Break Even Point)
- [x] Gross/Net Margin

---

**Fitur 4: Skenario What-If (Prioritas Medium)**
```jsx
// File: src/components/ScenarioAnalysis.jsx
const ScenarioSimulator = () => {
  // UI slider untuk variabel kunci:
  // - Harga bahan baku (±50%)
  // - Volume penjualan (±70%)
  // - Biaya tetap (±30%)
  // Tampilkan impact pada profit, BEP, IRR
}
```

---

**Fitur 5: Tooltip Edukasi (Prioritas Low)**
```jsx
// File: src/components/EduTooltip.jsx
const tooltips = {
  paybackPeriod: "Waktu balik modal: Total investasi / Arus kas tahunan",
  irr: "Tingkat pengembalian internal: Discount rate where NPV=0",
  // Buat 15+ tooltip relevan
}
```

---

**Fitur 6: Kesimpulan Kelayakan (Prioritas High)**
```jsx
// File: src/components/FeasibilityConclusion.jsx
const conclusionLogic = (metrics, template) => {
  if(metrics.irr > template.minIRR && 
     metrics.payback < template.maxPayback) {
    return "LAYAK";
  }
  // Logika multi-parameter
};
```

---

**Teknis Implementasi:**
1. Zustand Store Expansion:
```javascript
// Tambah state:
keuangan: {
  operasional: {
    tetap: [{id:1, nama: "Sewa", jumlah: 5000000}],
    variabel: [{id:1, nama: "Bahan", perUnit: 8000}]
  },
  metrics: {
    irr: 22.5,
    payback: 2.3
  }
}
```

2. Performance Optimization:
- Gunakan memoization untuk kalkulasi berat
- Debounce input perubahan
- Web Worker untuk kalkulasi IRR

3. Error Handling:
- Validasi input numerik
- Handling division by zero
- Error boundaries

---

**Output Yang Diharapkan:**
1. File-file baru lengkap (components, utils, constants)
2. Patch untuk file existing (Zustand store, step components)
3. Dokumentasi in-line untuk formula kompleks
4. Implementasi lengkap 6 fitur tanpa bug
```


Tentu, sebagai arsitek aplikasi bisnis dan senior full-stack developer, saya akan meng-extend aplikasi BizFeasibility Starter Anda dengan fitur-fitur profesional yang diminta. Fokus saya adalah pada modularitas, skalabilitas untuk platform mobile, dan performa, sesuai dengan arahan Anda.

Berikut adalah implementasi lengkap, dibagi per fitur, termasuk file-file baru dan patch untuk kode yang sudah ada.

1. Struktur Folder yang Direkomendasikan
Untuk mendukung modularitas dan pemisahan antara Web & Mobile, saya sarankan untuk menata ulang file Anda ke dalam struktur direktori yang lebih terorganisir:

/src
├── /components
│   ├── /common               # (Button.jsx, Input.jsx, etc.)
│   ├── /Finance              # (Komponen baru untuk keuangan)
│   │   ├── KeuanganCalculator.jsx
│   │   ├── OperationalCosts.jsx
│   │   ├── FeasibilityConclusion.jsx
│   │   └── ScenarioSimulator.jsx
│   └── /Export               # (Komponen terkait ekspor)
│       └── ExportButtons.jsx
├── /constants
│   └── industryTemplates.js  # (Template baru)
├── /context
│   └── useWizardStore.js     # (Store Zustand yang di-patch)
├── /screens
│   └── /wizard               # (Screen wizard yang di-patch)
│       ├── IdeBisnisScreen.jsx
│       ├── RisetPasarScreen.jsx
│       ├── KeuanganScreen.jsx
│       └── LaporanScreen.jsx
├── /utils
│   ├── financeCalculations.js # (Kalkulasi baru)
│   └── exportToExcel.js       # (Export baru)
├── /workers                  # (Opsional untuk kalkulasi berat)
│   └── irrCalculator.worker.js
└── App.js                    # (Entry point utama)
/public
├── manifest.json
└── service-worker.js
2. Patch untuk State Management (useWizardStore.js)
Kita perlu memperluas state Zustand untuk mengakomodasi data baru seperti biaya operasional, metrik keuangan, dan template industri.

File: src/context/useWizardStore.js
Aksi: Modifikasi state keuangan dan ideBisnis, serta tambahkan actions baru.

JavaScript

// Patch untuk: src/context/useWizardStore.js

// ... (import create, persist, etc.)

// Definisikan state awal untuk biaya operasional
const initialOperationalCosts = {
  tetap: [
    { id: 1, nama: 'Sewa Tempat/Kantor', jumlah: 0 },
    { id: 2, nama: 'Gaji Karyawan', jumlah: 0 },
  ],
  variabel: [
    { id: 1, nama: 'Bahan Baku Utama', perUnit: 0 },
    { id: 2, nama: 'Biaya Kemasan (Packaging)', perUnit: 0 },
  ],
};

const useWizardStore = create(
  persist(
    (set, get) => ({
      // STATE (Existing + Tambahan)
      currentStep: 1,
      projectId: null,
      userId: 'user_123',
      lastInteraction: Date.now(),
      // [PATCH] Tambahkan industryTemplate & industryKey
      ideBisnis: { nama: '', deskripsi: '', kategori: '', industryKey: 'food' },
      risetPasar: { /* ... state existing ... */ },
      // [PATCH] Rombak state keuangan untuk mengakomodasi metrik & biaya
      keuangan: {
        modal: '',
        hargaJual: '',
        volume: '',
        // State baru untuk biaya operasional
        operasional: initialOperationalCosts,
        // State baru untuk hasil kalkulasi
        metrics: {
          roi: 0,
          paybackPeriod: 0, // dalam tahun
          irr: 0,
          bepUnits: 0,
          grossMargin: 0,
          netMargin: 0,
          totalFixedCosts: 0,
          totalVariableCostPerUnit: 0,
        },
        // State baru untuk skenario
        scenario: {
          hargaBahan: 0, // persentase perubahan: -50 to 50
          volumeJual: 0, // persentase perubahan: -70 to 70
          biayaTetap: 0, // persentase perubahan: -30 to 30
        }
      },
      laporan: { /* ... state existing ... */ },
      uiState: { /* ... state existing ... */ },
      
      // ACTIONS (Existing + Tambahan)
      actions: {
        // --- Existing Actions ---
        nextStep: () => set(state => ({ currentStep: Math.min(state.currentStep + 1, 4) })),
        prevStep: () => set(state => ({ currentStep: Math.max(state.currentStep - 1, 1) })),
        goToStep: (step) => set({ currentStep: step }),
        updateData: (stepKey, data) => set(state => ({
            [stepKey]: { ...state[stepKey], ...data },
            lastInteraction: Date.now()
        })),
        // ... (existing actions: addKompetitor, generateBusinessIdea, etc.)

        // [ACTION BARU] Aksi untuk modul biaya operasional
        updateFixedCost: (index, field, value) => set(state => {
          const newFixedCosts = [...state.keuangan.operasional.tetap];
          newFixedCosts[index] = { ...newFixedCosts[index], [field]: value };
          return { keuangan: { ...state.keuangan, operasional: { ...state.keuangan.operasional, tetap: newFixedCosts }}};
        }),
        addFixedCost: () => set(state => {
          const newFixedCosts = [...state.keuangan.operasional.tetap, { id: Date.now(), nama: '', jumlah: 0 }];
          return { keuangan: { ...state.keuangan, operasional: { ...state.keuangan.operasional, tetap: newFixedCosts }}};
        }),
        removeFixedCost: (index) => set(state => {
          const newFixedCosts = state.keuangan.operasional.tetap.filter((_, i) => i !== index);
          return { keuangan: { ...state.keuangan, operasional: { ...state.keuangan.operasional, tetap: newFixedCosts }}};
        }),
        // (Aksi serupa untuk `variableCosts`: update, add, remove) ...

        // [ACTION BARU] Aksi untuk memperbarui metrik hasil kalkulasi
        updateFinancialMetrics: (newMetrics) => set(state => ({
          keuangan: { ...state.keuangan, metrics: { ...state.keuangan.metrics, ...newMetrics }}
        })),

        // [ACTION BARU] Aksi untuk simulator "What-If"
        updateScenario: (key, value) => set(state => ({
          keuangan: { ...state.keuangan, scenario: { ...state.keuangan.scenario, [key]: value }}
        })),

        // --- Utility ---
        resetWizard: () => set({
            currentStep: 1,
            projectId: null,
            ideBisnis: { nama: '', deskripsi: '', kategori: '', industryKey: 'food' },
            keuangan: {
              modal: '',
              hargaJual: '',
              volume: '',
              operasional: initialOperationalCosts,
              metrics: { /* ... reset metrics ... */ },
              scenario: { /* ... reset scenario ... */ }
            },
            // ... reset state lainnya
        }),
        // ... (sisa actions)
      }
    }),
    {
      name: 'bizfeasibility-pro-storage',
      // ... (sisa config persist)
    }
  )
);
3. Fitur Utama: Kode & Penjelasan
Fitur 1: Template Kelayakan Industri (Prioritas Tinggi)
File ini menjadi "single source of truth" untuk benchmark industri.

File Baru: src/constants/industryTemplates.js

JavaScript

// File: src/constants/industryTemplates.js
/**
 * Berisi parameter dan benchmark keuangan untuk berbagai industri.
 * - minROI: Minimum Return on Investment yang dianggap sehat (dalam %).
 * - minIRR: Minimum Internal Rate of Return (dalam %).
 * - maxPayback: Maksimum Payback Period yang bisa diterima (dalam tahun).
 * - minMargin: Minimum Net Profit Margin (dalam %).
 * - fixedCosts: Contoh biaya tetap yang umum di industri ini.
 * - variableCosts: Contoh biaya variabel yang umum.
 * - benchmark: Data pembanding, cth: persentase biaya marketing dari pendapatan.
 */
export const INDUSTRY_TEMPLATES = {
  food: {
    nama: "Makanan & Minuman",
    parameter: { minROI: 20, minIRR: 18, maxPayback: 2.5, minMargin: 15 },
    saranBiayaTetap: ["Sewa tempat (dapur/outlet)", "Gaji chef/barista", "Listrik & Air", "Marketing & Promosi"],
    saranBiayaVariabel: ["Bahan baku per porsi", "Kemasan (box/gelas)", "Biaya platform delivery (GoFood/GrabFood)"],
  },
  fashion: {
    nama: "Fashion & Aksesoris",
    parameter: { minROI: 25, minIRR: 20, maxPayback: 3, minMargin: 20 },
    saranBiayaTetap: ["Sewa butik/gudang", "Gaji desainer/penjahit", "Biaya photoshoot produk", "Langganan platform e-commerce"],
    saranBiayaVariabel: ["Kain & benang per item", "Biaya maklun (jika ada)", "Packaging eksklusif", "Komisi reseller"],
  },
  tech: {
    nama: "Teknologi & Digital",
    parameter: { minROI: 30, minIRR: 25, maxPayback: 4, minMargin: 25 },
    saranBiayaTetap: ["Gaji developer & engineer", "Biaya server & cloud (AWS/GCP)", "Sewa kantor", "Lisensi software"],
    saranBiayaVariabel: ["Biaya API per request", "Komisi App Store/Play Store", "Biaya akuisisi customer (Ads)"],
  },
  health: {
    nama: "Kesehatan & Kecantikan",
    parameter: { minROI: 22, minIRR: 19, maxPayback: 3.5, minMargin: 18 },
    saranBiayaTetap: ["Sewa klinik/salon", "Gaji terapis/dokter", "Biaya lisensi & sertifikasi", "Asuransi malpraktik"],
    saranBiayaVariabel: ["Produk habis pakai per treatment", "Botol & kemasan produk", "Biaya sterilisasi alat"],
  },
  education: {
    nama: "Pendidikan & Kursus",
    parameter: { minROI: 18, minIRR: 15, maxPayback: 3, minMargin: 20 },
    saranBiayaTetap: ["Sewa ruang kelas/kantor", "Gaji pengajar/tutor", "Pengembangan kurikulum", "Platform e-learning"],
    saranBiayaVariabel: ["Materi cetak per siswa", "Fee untuk pengajar tamu", "Sertifikat kelulusan"],
  },
  service: {
    nama: "Jasa & Layanan",
    parameter: { minROI: 25, minIRR: 22, maxPayback: 2, minMargin: 30 },
    saranBiayaTetap: ["Sewa kantor", "Gaji staf ahli", "Software CRM & Project Management", "Asuransi profesional"],
    saranBiayaVariabel: ["Biaya transportasi per proyek", "Material penunjang per klien", "Komisi untuk tim sales"],
  },
  retail: {
    nama: "Retail & E-commerce",
    parameter: { minROI: 15, minIRR: 18, maxPayback: 3.5, minMargin: 10 },
    saranBiayaTetap: ["Sewa toko/gudang", "Gaji kasir & staf", "Sistem POS (Point of Sale)", "Biaya marketplace"],
    saranBiayaVariabel: ["Harga pokok pembelian barang", "Biaya pengiriman (Shipping)", "Biaya pemrosesan pembayaran"],
  },
  other: {
    nama: "Lainnya",
    parameter: { minROI: 15, minIRR: 15, maxPayback: 4, minMargin: 10 },
    saranBiayaTetap: ["Sewa", "Gaji", "Marketing"],
    saranBiayaVariabel: ["Bahan Baku", "Komisi"],
  }
};
Integrasi ke IdeBisnisScreen.jsx:

File: src/screens/wizard/IdeBisnisScreen.jsx
Aksi: Ganti KATEGORI_BISNIS dengan data dari INDUSTRY_TEMPLATES.

JavaScript

// Patch untuk: src/screens/wizard/IdeBisnisScreen.jsx

import { INDUSTRY_TEMPLATES } from '../../constants/industryTemplates'; // <-- Import

const IdeBisnisScreen = () => {
    // [PATCH] Gunakan `industryKey` dari state
    const { ideBisnis, uiState, actions } = useWizardStore(state => ({
      ideBisnis: state.ideBisnis,
      uiState: state.uiState,
      actions: state.actions
    }));
    // ... (hooks lainnya)

    // [PATCH] Buat opsi dari konstanta baru
    const KATEGORI_INDUSTRI = Object.entries(INDUSTRY_TEMPLATES).map(([key, value]) => ({
      label: value.nama,
      value: key,
    }));

    const handleCategoryChange = (e) => {
      const newIndustryKey = e.target.value;
      // Simpan `industryKey` ke state untuk digunakan di langkah selanjutnya
      actions.updateData('ideBisnis', { kategori: INDUSTRY_TEMPLATES[newIndustryKey]?.nama, industryKey: newIndustryKey });
    };

    return (
        <div className="space-y-6 animate-fade-in">
            {/* ... (Modal & Header) */}
            <div className="space-y-4">
                 {/* [PATCH] Gunakan `industryKey` sebagai value */}
                 <Select label="Pilih Industri Bisnis" value={ideBisnis.industryKey} onChange={handleCategoryChange}>
                    {KATEGORI_INDUSTRI.map(k => <option key={k.value} value={k.value}>{k.label}</option>)}
                </Select>
                {/* ... (Sisa komponen Input, Button, etc.) */}
            </div>
            {/* ... */}
        </div>
    );
};
Fitur 2 & 3: Biaya Operasional & Kalkulator Keuangan Pro
Pertama, kita buat "otak" perhitungannya. Logic ini sengaja dibuat murni (tanpa hooks) agar bisa di-port ke React Native atau bahkan Web Worker.

File Baru: src/utils/financeCalculations.js

JavaScript

// File: src/utils/financeCalculations.js

/**
 * Menghitung Return on Investment (ROI).
 * @param {number} netProfit - Laba bersih tahunan.
 * @param {number} initialInvestment - Modal awal.
 * @returns {number} ROI dalam persentase.
 */
export const calculateROI = (netProfit, initialInvestment) => {
  if (initialInvestment === 0) return 0;
  return (netProfit / initialInvestment) * 100;
};

/**
 * Menghitung Payback Period (waktu balik modal).
 * @param {number} initialInvestment - Modal awal.
 * @param {number} annualCashFlow - Arus kas bersih tahunan (Net Profit + Depresiasi).
 * @returns {number} Payback period dalam tahun (bisa pecahan).
 */
export const calculatePaybackPeriod = (initialInvestment, annualCashFlow) => {
  if (annualCashFlow <= 0) return Infinity; // Tidak akan pernah balik modal
  return initialInvestment / annualCashFlow;
};

/**
 * Menghitung Break Even Point (BEP) dalam unit.
 * @param {number} totalFixedCosts - Total biaya tetap per periode (misal, per bulan).
 * @param {number} pricePerUnit - Harga jual per unit.
 * @param {number} variableCostPerUnit - Biaya variabel per unit.
 * @returns {number} Jumlah unit yang harus terjual untuk mencapai BEP.
 */
export const calculateBEPUnits = (totalFixedCosts, pricePerUnit, variableCostPerUnit) => {
    const contributionMargin = pricePerUnit - variableCostPerUnit;
    if (contributionMargin <= 0) return Infinity;
    return totalFixedCosts / contributionMargin;
};

/**
 * Menghitung Internal Rate of Return (IRR) menggunakan metode Newton-Raphson.
 * Ini adalah perhitungan iteratif untuk menemukan discount rate di mana NPV = 0.
 * @param {number[]} cashFlows - Array arus kas. Elemen pertama HARUS negatif (investasi awal).
 * @param {number} [guess=0.1] - Tebakan awal untuk IRR.
 * @returns {number} IRR dalam persentase.
 * @dev Ini adalah implementasi yang disederhanakan. Untuk presisi tinggi, library keuangan direkomendasikan.
 */
export const calculateIRR = (cashFlows, guess = 0.1) => {
  const maxIterations = 100;
  const tolerance = 1e-6;
  let irr = guess;

  for (let i = 0; i < maxIterations; i++) {
    let npv = 0;
    let dNpv = 0; // Turunan pertama NPV terhadap r (rate)
    for (let t = 0; t < cashFlows.length; t++) {
      npv += cashFlows[t] / Math.pow(1 + irr, t);
      if (t > 0) {
        dNpv -= t * cashFlows[t] / Math.pow(1 + irr, t + 1);
      }
    }
    
    if (Math.abs(npv) < tolerance) {
      return irr * 100;
    }
    
    if (dNpv === 0) break; // Hindari division by zero
    
    irr = irr - npv / dNpv;
  }
  return NaN; // Gagal konvergen
};

/**
 * Fungsi utama untuk mengkalkulasi semua metrik keuangan.
 * @param {object} data - Kumpulan data dari state (keuangan, scenario).
 * @returns {object} Objek berisi semua metrik yang telah dihitung.
 */
export const calculateAllMetrics = (data) => {
    const { modal, hargaJual, volume, operasional, scenario } = data;

    // Terapkan skenario "What-If"
    const scenarioMultiplier = {
        bahan: 1 + (scenario.hargaBahan / 100),
        volume: 1 + (scenario.volumeJual / 100),
        tetap: 1 + (scenario.biayaTetap / 100),
    };

    const numModal = Number(modal) || 0;
    const numHargaJual = Number(hargaJual) || 0;
    const numVolume = (Number(volume) || 0) * scenarioMultiplier.volume;
    
    const totalFixedCosts = operasional.tetap.reduce((acc, cost) => acc + Number(cost.jumlah), 0) * scenarioMultiplier.tetap;
    const totalVariableCostPerUnit = operasional.variabel.reduce((acc, cost) => acc + Number(cost.perUnit), 0) * scenarioMultiplier.bahan;
    
    if (numHargaJual === 0 || numVolume === 0) return {};

    const monthlyRevenue = numHargaJual * numVolume;
    const monthlyVariableCosts = totalVariableCostPerUnit * numVolume;
    const monthlyGrossProfit = monthlyRevenue - monthlyVariableCosts;
    const monthlyNetProfit = monthlyGrossProfit - totalFixedCosts;
    
    const annualNetProfit = monthlyNetProfit * 12;

    // Asumsi arus kas tahunan sama dengan laba bersih (penyederhanaan)
    const annualCashFlow = annualNetProfit;

    // Buat array arus kas untuk 5 tahun untuk kalkulasi IRR
    // Tahun 0: Investasi awal (negatif)
    // Tahun 1-5: Arus kas tahunan
    const cashFlowsForIRR = [-numModal, ...Array(5).fill(annualCashFlow)];

    return {
        roi: calculateROI(annualNetProfit, numModal),
        paybackPeriod: calculatePaybackPeriod(numModal, annualCashFlow),
        irr: calculateIRR(cashFlowsForIRR),
        bepUnits: calculateBEPUnits(totalFixedCosts, numHargaJual, totalVariableCostPerUnit),
        grossMargin: (monthlyGrossProfit / monthlyRevenue) * 100,
        netMargin: (monthlyNetProfit / monthlyRevenue) * 100,
        totalFixedCosts: totalFixedCosts,
        totalVariableCostPerUnit: totalVariableCostPerUnit,
        monthlyNetProfit: monthlyNetProfit,
    };
};
Selanjutnya, kita buat komponen untuk input biaya.

File Baru: src/components/Finance/OperationalCosts.jsx

JavaScript

// File: src/components/Finance/OperationalCosts.jsx
import React from 'react';
import { useWizardStore } from '../../context/useWizardStore';
import { Button } from '../common/Button'; // Asumsi komponen Button dipindah
import { Input } from '../common/Input';   // Asumsi komponen Input dipindah
import { TrashIcon } from '../common/Icons'; // Asumsi ikon dipindah

const CostRow = ({ item, index, onUpdate, onRemove, type }) => {
    const field = type === 'tetap' ? 'jumlah' : 'perUnit';
    const handleNumericInput = (e) => {
        const value = e.target.value.replace(/[^0-9]/g, '');
        onUpdate(index, field, Number(value));
    };
    return (
        <div className="grid grid-cols-12 gap-2 items-center">
            <div className="col-span-6">
                <Input
                    placeholder="Nama Biaya (cth: Gaji)"
                    value={item.nama}
                    onChange={(e) => onUpdate(index, 'nama', e.target.value)}
                />
            </div>
            <div className="col-span-5">
                <Input
                    placeholder="Jumlah (Rp)"
                    value={item[field] ? item[field].toLocaleString('id-ID') : ''}
                    onChange={handleNumericInput}
                />
            </div>
            <div className="col-span-1">
                <button onClick={() => onRemove(index)} className="p-2 hover:bg-red-100 rounded-full">
                    <TrashIcon />
                </button>
            </div>
        </div>
    );
};

export const OperationalCosts = () => {
    const { keuangan, actions } = useWizardStore(state => ({
        keuangan: state.keuangan,
        actions: state.actions,
    }));
    
    const { operasional } = keuangan;

    return (
        <div className="space-y-6 bg-gray-50 border border-gray-200 rounded-lg p-6">
            <h3 className="text-xl font-bold text-gray-800">Detail Biaya Operasional</h3>
            
            {/* Biaya Tetap */}
            <div>
                <h4 className="font-semibold text-gray-700 mb-2">Biaya Tetap (Per Bulan)</h4>
                <div className="space-y-2">
                    {operasional.tetap.map((item, index) => (
                        <CostRow 
                            key={item.id} 
                            item={item} 
                            index={index} 
                            onUpdate={actions.updateFixedCost}
                            onRemove={actions.removeFixedCost}
                            type="tetap"
                        />
                    ))}
                </div>
                <Button onClick={actions.addFixedCost} variant="secondary" className="mt-2 w-auto text-sm">+ Tambah Biaya Tetap</Button>
            </div>

            {/* Biaya Variabel */}
            {/* Implementasi serupa untuk Biaya Variabel (per unit) */}

        </div>
    );
};
Fitur 4, 5, dan 6: Kesimpulan, Skenario, dan Export
Kita gabungkan semua komponen keuangan baru ke dalam KeuanganScreen.

File (Patch): src/screens/wizard/KeuanganScreen.jsx

JavaScript

// File: src/screens/wizard/KeuanganScreen.jsx

// --- Imports ---
import React, { useEffect } from 'react';
import { useWizardStore } from '../../context/useWizardStore';
import { Input } from '../../components/common/Input';
import { Button } from '../../components/common/Button';
import { ArrowRightIcon } from '../../components/common/Icons';

// --- Komponen Baru ---
import { OperationalCosts } from '../../components/Finance/OperationalCosts';
import { KeuanganCalculatorPro } from '../../components/Finance/KeuanganCalculatorPro'; // Ganti nama komponen lama
import { ScenarioSimulator } from '../../components/Finance/ScenarioSimulator';
import { FeasibilityConclusion } from '../../components/Finance/FeasibilityConclusion';

// --- Logic Kalkulasi ---
import { calculateAllMetrics } from '../../utils/financeCalculations';

const KeuanganScreen = () => {
    const { keuangan, ideBisnis, actions } = useWizardStore();
    const { updateData, validateStep, nextStep, prevStep, autoSave, updateFinancialMetrics } = actions;
    
    // [LOGIC UTAMA] Lakukan kalkulasi setiap kali ada perubahan data
    useEffect(() => {
        const allData = { ...keuangan, industryKey: ideBisnis.industryKey };
        const newMetrics = calculateAllMetrics(allData);
        updateFinancialMetrics(newMetrics);
    }, [keuangan, ideBisnis.industryKey, updateFinancialMetrics]);

    const handleNext = () => { if (validateStep(3)) { autoSave(); nextStep(); } };
    const handleNumericInput = (field, value) => { /* ... (logic sama) ... */ };

    return (
         <div className="space-y-8 animate-fade-in">
            <div className="text-center">
                <h2 className="text-3xl font-bold text-gray-800">Proyeksi Keuangan</h2>
                <p className="text-gray-500 mt-1">Langkah 3 dari 4 • Mari kita hitung potensi keuntungan Anda.</p>
            </div>
            
            {/* Bagian Input Utama */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <Input label="Modal Awal (Rp)" /* ... props ... */ />
                <Input label="Harga Jual per Unit (Rp)" /* ... props ... */ />
                <Input label="Target Volume Penjualan / Bulan" /* ... props ... */ />
            </div>

            {/* Modul Biaya Operasional */}
            <OperationalCosts />
            
            {/* Kalkulator & Metrik Lanjutan */}
            <KeuanganCalculatorPro />
            
            {/* Simulator What-If */}
            <ScenarioSimulator />
            
            {/* Kesimpulan Kelayakan */}
            <FeasibilityConclusion />

            <div className="flex flex-col sm:flex-row gap-3 pt-4">
                <Button onClick={prevStep} variant="secondary">Kembali</Button>
                <Button onClick={handleNext} disabled={!validateStep(3)} icon={<ArrowRightIcon/>}>Lanjut ke Laporan</Button>
            </div>
        </div>
    );
};

export default KeuanganScreen;
File Baru: src/components/Finance/FeasibilityConclusion.jsx

JavaScript

// File: src/components/Finance/FeasibilityConclusion.jsx
import React from 'react';
import { useWizardStore } from '../../context/useWizardStore';
import { INDUSTRY_TEMPLATES } from '../../constants/industryTemplates';

const getConclusion = (metrics, template) => {
    if (!template || !metrics.irr) {
        return {
            status: 'LOADING',
            title: 'Menunggu Data...',
            message: 'Lengkapi data modal, harga, volume, dan biaya untuk melihat kesimpulan kelayakan.'
        };
    }

    const { minIRR, maxPayback, minROI } = template.parameter;
    const isIrrOk = metrics.irr >= minIRR;
    const isPaybackOk = metrics.paybackPeriod <= maxPayback;
    const isRoiOk = metrics.roi >= minROI;

    const score = (isIrrOk ? 1 : 0) + (isPaybackOk ? 1 : 0) + (isRoiOk ? 1 : 0);

    if (score === 3) {
        return { status: 'LAYAK', title: 'Sangat Layak!', message: 'Berdasarkan benchmark industri, metrik keuangan Anda sangat solid. Potensi tinggi untuk dilanjutkan.' };
    }
    if (score >= 1) {
        return { status: 'PERTIMBANGKAN', title: 'Layak dengan Pertimbangan', message: `Beberapa metrik sudah baik, namun ada ${3 - score} parameter yang belum memenuhi benchmark. Tinjau kembali strategi harga atau efisiensi biaya.` };
    }
    return { status: 'RISIKO TINGGI', title: 'Risiko Tinggi', message: 'Metrik keuangan Anda berada di bawah benchmark industri. Diperlukan revisi model bisnis yang signifikan.' };
};

export const FeasibilityConclusion = () => {
    const { metrics, industryKey } = useWizardStore(state => ({
        metrics: state.keuangan.metrics,
        industryKey: state.ideBisnis.industryKey,
    }));

    const template = INDUSTRY_TEMPLATES[industryKey];
    const conclusion = getConclusion(metrics, template);

    const colorClasses = {
        'LAYAK': 'bg-green-100 border-green-500 text-green-800',
        'PERTIMBANGKAN': 'bg-yellow-100 border-yellow-500 text-yellow-800',
        'RISIKO TINGGI': 'bg-red-100 border-red-500 text-red-800',
        'LOADING': 'bg-gray-100 border-gray-400 text-gray-800',
    };

    return (
        <div className={`border-l-4 p-5 rounded-r-lg ${colorClasses[conclusion.status]}`}>
            <h3 className="font-bold text-xl">{conclusion.title}</h3>
            <p className="mt-2 text-sm">{conclusion.message}</p>
        </div>
    );
};
File Baru: src/utils/exportToExcel.js

JavaScript

// File: src/utils/exportToExcel.js
import * as XLSX from 'xlsx';

/**
 * Meng-export data kelayakan bisnis ke file Excel (.xlsx).
 * @param {object} allData - Objek lengkap dari state Zustand (ideBisnis, risetPasar, keuangan).
 */
export const exportToExcel = (allData) => {
    const { ideBisnis, risetPasar, keuangan } = allData;
    const { metrics } = keuangan;

    // Sheet 1: Ringkasan
    const summaryData = [
        ["Nama Proyek", ideBisnis.nama],
        ["Industri", ideBisnis.kategori],
        ["Deskripsi", ideBisnis.deskripsi],
        [], // Baris kosong
        ["KESIMPULAN METRIK"],
        ["ROI", `${metrics.roi.toFixed(2)}%`],
        ["Payback Period", `${metrics.paybackPeriod.toFixed(1)} tahun`],
        ["IRR", `${metrics.irr.toFixed(2)}%`],
        ["BEP", `${Math.ceil(metrics.bepUnits)} unit/bulan`],
    ];
    const summaryWs = XLSX.utils.aoa_to_sheet(summaryData);

    // Sheet 2: Detail Keuangan
    const financeData = [
        ["MODAL & PENDAPATAN"],
        ["Modal Awal", keuangan.modal],
        ["Harga Jual / Unit", keuangan.hargaJual],
        ["Volume / Bulan", keuangan.volume],
        [],
        ["BIAYA TETAP / BULAN"],
        ...keuangan.operasional.tetap.map(cost => [cost.nama, cost.jumlah]),
        ["Total Biaya Tetap", metrics.totalFixedCosts],
        [],
        ["BIAYA VARIABEL / UNIT"],
        ...keuangan.operasional.variabel.map(cost => [cost.nama, cost.perUnit]),
        ["Total Biaya Variabel / Unit", metrics.totalVariableCostPerUnit],
    ];
    const financeWs = XLSX.utils.aoa_to_sheet(financeData);
    
    // Buat Workbook
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, summaryWs, "Ringkasan");
    XLSX.utils.book_append_sheet(wb, financeWs, "Detail Keuangan");

    // Unduh file
    XLSX.writeFile(wb, `Laporan Kelayakan - ${ideBisnis.nama}.xlsx`);
};

Integrasi ke LaporanScreen.jsx:
Cukup tambahkan tombol baru yang memanggil fungsi exportToExcel.

4. Non-Functional Requirements
Performance: Penggunaan useEffect di KeuanganScreen untuk memicu kalkulasi, digabungkan dengan useMemo di dalam komponen display seperti KeuanganCalculatorPro adalah pola yang baik. Untuk kalkulasi IRR yang lebih kompleks di production, memindahkannya ke Web Worker adalah langkah yang tepat untuk mencegah UI blocking.
Error Handling:
Validasi division by zero dan input NaN sudah ditambahkan di financeCalculations.js.
Untuk ErrorBoundary, buat komponen ErrorBoundary.jsx dan bungkus {renderStep()} di App.js dengannya.
Shared Logic: useWizardStore, financeCalculations.js, dan industryTemplates.js sekarang 100% bebas dari DOM API dan siap digunakan di React Native. Komponen UI perlu dibuatkan versi native-nya (<View>, <Text>, <TextInput>), namun logic-nya bisa langsung di-import.
PWA:
public/manifest.json:
JSON

{
  "short_name": "BizFeasibility",
  "name": "BizFeasibility Pro",
  "icons": [ /* ... array of icons ... */ ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#4ade80",
  "background_color": "#f9fafb"
}
public/service-worker.js: Buat service worker dasar untuk caching asset (cache-first strategy).